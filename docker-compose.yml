services:
  identity_provider:
    image: snowflower1408/utconnect_identity_provider
    container_name: identity_provider
    ports:
      - "5100:8080"
    build:
      context: .
      dockerfile: src/Identity/IdentityProvider/Dockerfile
    depends_on:
      identity_provider_db:
        condition: service_healthy
    networks:
      - backend
      - coffer_vault-network
    environment:
      - ASPNETCORE_ENVIRONMENT=Production

  home:
    image: snowflower1408/utconnect_home
    container_name: home
    build:
      context: .
      dockerfile: src/Home/Home.Presentation/Dockerfile
    networks:
      - backend
    environment:
      - ASPNETCORE_ENVIRONMENT=Production

  oidc:
    image: snowflower1408/utconnect_oidc
    container_name: oidc
    ports:
      - "5101:8080"
    build:
      context: .
      dockerfile: src/Oidc/Oidc.Presentation/Dockerfile
    depends_on:
      oidc_db:
        condition: service_healthy
    networks:
      - backend
      - coffer_vault-network
    environment:
      - ASPNETCORE_ENVIRONMENT=Production

  identity_provider_db:
    container_name: identity_provider_db
    image: postgres:16.3
    restart: always
    ports:
      - "54320:5432"
    environment:
      POSTGRES_PASSWORD: example
      POSTGRES_DB: Identity
    volumes:
      - identity_provider_data_db:/var/lib/postgresql/data
      - ./Docker/IdentityProvider:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend

  oidc_db:
    container_name: oidc_db
    image: postgres:16.3
    restart: always
    ports:
      - "54322:5432"
    environment:
      POSTGRES_PASSWORD: example
      POSTGRES_DB: Oidc
    volumes:
      - oidc_data_db:/var/lib/postgresql/data
      - ./Docker/Oidc:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend

  jarvis_db:
    container_name: jarvis_db
    image: postgres:16.3
    restart: always
    ports:
      - "54323:5432"
    environment:
      POSTGRES_PASSWORD: example
      POSTGRES_DB: Jarvis
    volumes:
      - jarvis_data_db:/var/lib/postgresql/data
      - ./Docker/Oidc:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend

  data_processor_db:
    container_name: data_processor_db
    image: postgres:16.3
    restart: always
    ports:
      - "54323:5432"
    environment:
      POSTGRES_PASSWORD: example
      POSTGRES_DB: DataProcessor
    volumes:
      - data_processor_data_db:/var/lib/postgresql/data
      - ./Docker/Oidc:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend

networks:
  backend:
  coffer_vault-network:
    external: true

volumes:
  identity_provider_data_db:
  oidc_data_db:
  jarvis_data_db:
  data_processor_data_db:
